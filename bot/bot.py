import json
import textwrap

from buttons import (BUTTON_CURRENCY, BUTTON_OK, BUTTON_REPORTS, BUTTON_TABLE,
                     button_user_categories)
from prettytable import ALL, PrettyTable
from telegram.error import NetworkError
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater
from user_interface.user import User
from user_interface.utility import (execute_time_wrapper, is_float,
                                    prettify_total)
from variables import logging

LOG = logging.getLogger(__name__)


class MyBot:
    user_dict = {}

    def __init__(self, token):
        self.updater = Updater(token=token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.dispatcher.add_handler(
            CommandHandler('start', self.start_message))
        self.dispatcher.add_handler(
            MessageHandler(Filters.text, self.handle_message))

    def start_polling(self):
        try:
            self.updater.start_polling()
        except NetworkError as err:
            LOG.warning('Unable to connect to telegram API: %s', err)

    @classmethod
    def get_or_create_user(cls, chat_id, update):
        if not cls.user_dict.get(chat_id):
            user = User(update)
            cls.user_dict.update({user.id: user})
            return user
        return cls.user_dict.get(chat_id)

    def start_message(self, update, context):
        user = self.initiate_user(update, context)
        context.bot.send_message(
            chat_id=user.id,
            text=(
                f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}. '
                '–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º. '
                '–ò—Ç–∞–∫:\n'
                '---------------------------------\n'
                '1. –£–∫–∞–∑—ã–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞\n'
                '2. –í–≤–æ–¥–∏ —Å—É–º–º—É\n'
                '3. –°–º–æ—Ç—Ä–∏ –∏—Ç–æ–≥\n'
                '---------------------------------\n'
                '–ú–µ–Ω—è –Ω–µ –ø—Ä–æ—Å–∏–ª–∏, –Ω–æ —è –ø–æ—Å–æ–≤–µ—Ç—É—é:\n'
                '–ó–∞–ø–∏—Å—ã–≤–∞–π —Ä–∞—Å—Ö–æ–¥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, '
                '–ø–æ—Ç–æ–º –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫—É–¥–∞ —É—à–ª–∏ –≤—Å–µ –¥–µ–Ω—å–≥–∏. '
                '–°—Ç–∞—Ä–∞–π—Å—è –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –º–∏–Ω–∏–º–∞–ª–∏–∑–º–∞ '
                '–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n'
                '–∫–æ—Ñ–µ <- —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –Ω–µ–π–º–∏–Ω–≥–∞\n'
                '–ö–æ—Ñ—Ñ–µ‚òïÔ∏èüëç <- –Ω–µ–π–º–∏–Ω–≥ –Ω–µ –æ—á–µ–Ω—å, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ—á–µ–º—É'
            ),
            reply_markup=BUTTON_TABLE
        )

    def initiate_user(self, update, context):
        chat_id = update.effective_chat.id
        user = self.get_or_create_user(chat_id, update)
        user.last_message = update.message.text
        return user

    @staticmethod
    def user_choose_record(user, context):
        user.last_category = None
        user.last_summ = None
        context.bot.send_message(
            chat_id=user.id,
            text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
            reply_markup=button_user_categories(user.categories)
        )

    @staticmethod
    def user_record_list(user: User, context):
        data = user.request_get_records_list().json()
        if data:
            context.bot.send_message(
                chat_id=user.id,
                text=json.dumps(data, indent=2),
            )
        else:
            context.bot.send_message(
                chat_id=user.id,
                text='–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥?',
                reply_markup=button_user_categories(user.categories)
            )

    @staticmethod
    def user_total_records(user: User, context, period='–¥–µ–Ω—å', custom=None):
        period = {
            '–º–µ—Å—è—Ü': 'month',
            '–Ω–µ–¥–µ–ª—é': 'week',
            '–¥–µ–Ω—å': 'day'
        }[period] if not custom else custom
        output = textwrap.dedent(
            """
            <pre>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {period}</pre>
            """
        ).format(period=period)
        try:
            data = user.request_get_total(
                period=f'?period={period}').json()
            if data['summary']:
                output = prettify_total(data, user.currency)
        except Exception as err:
            output = f'period: {period!r}\n**error**:\n {err}'
        context.bot.send_message(
            chat_id=user.id,
            text=output,
            parse_mode='HTML',
            reply_markup=BUTTON_TABLE
        )


    @staticmethod
    def user_create_category(
            user: User, category_name, action, context):
        user.request_category(category_name, action)
        context.bot.send_message(
            chat_id=user.id,
            text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
            reply_markup=button_user_categories(user.categories)
        )

    @execute_time_wrapper
    def handle_message(self, update, context):
        user = self.initiate_user(update, context)
        user_categories = [c.lower() for c in user.categories]
        if user.last_message in ['–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥', '–ù–ê–ó–ê–î üîô']:
            self.user_choose_record(user, context)

        elif user.last_message == 'NEW CATEGORY':
            user.last_category = user.last_message
            context.bot.send_message(
                chat_id=user.id,
                text='–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            )
        elif user.last_category == 'NEW CATEGORY':
            user.last_category = user.last_message
            context.bot.send_message(
                chat_id=user.id,
                text=(
                    '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.last_message}\n'
                    '–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–î–ê ‚úÖ"'
                ),
                reply_markup=BUTTON_OK
            )
        elif user.last_message == '–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É':
            context.bot.send_message(
                chat_id=user.id,
                text=(
                    '–£–∫–∞–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤–∞–ª—é—Ç—É:\n'
                ),
                reply_markup=BUTTON_CURRENCY
            )
        elif user.last_message in ('EUR', 'RUB', 'USD', 'USDT'):
            user.currency = user.last_message
            context.bot.send_message(
                chat_id=user.id,
                text=(
                    f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {user.currency}\n'
                ),
                reply_markup=BUTTON_TABLE
            )
        elif user.last_message == '–û—Ç—á–µ—Ç—ã':
            context.bot.send_message(
                chat_id=user.id,
                text='–í—ã–±–µ—Ä–µ—Ç–µ –æ—Ç—á–µ—Ç',
                reply_markup=BUTTON_REPORTS
            )
        elif any([
                '–∑–∞ –º–µ—Å—è—Ü' in user.last_message,
                '–∑–∞ –Ω–µ–¥–µ–ª—é' in user.last_message,
                '–∑–∞ –¥–µ–Ω—å' in user.last_message]):
            self.user_total_records(
                user, context, user.last_message.split()[2])

        elif user.last_message == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤':
            self.user_record_list(user, context)

        elif user.last_message in ('‚öôÔ∏è–ú–µ–Ω—é', '–ù–ê–ó–ê–î üîô'):
            context.bot.send_message(
                chat_id=user.id,
                text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=BUTTON_TABLE
            )

        elif user.last_message.lower() in user_categories:
            user.last_category = user.last_message
            context.bot.send_message(
                chat_id=user.id,
                text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:'
            )

        elif user.last_message.isdigit() or is_float(user.last_message):
            user.last_summ = user.last_message
            if user.last_category:
                text = f'<pre>'
                table = PrettyTable(
                    field_names=('CATEGORY', user.currency),
                    hrules=ALL,
                    align='l',
                )
                table._max_width = {"CATEGORY": 17, user.currency: 7}
                table.add_row([user.last_category, user.last_message])
                text += (
                    table.get_string()
                    + '</pre>\n–ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–µ—Ä–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ "–î–ê ‚úÖ"')

                context.bot.send_message(
                    chat_id=user.id,
                    text=text,
                    parse_mode='HTML',
                    reply_markup=BUTTON_OK
                )
            else:
                context.bot.send_message(
                    chat_id=user.id,
                    text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                    reply_markup=button_user_categories(user_categories)
                )

        elif user.last_message in ('–î–ê ‚úÖ', 'Yes', 'yes', '–î–∞', '–¥–∞', '+'):
            if user.last_summ and user.last_category:
                try:
                    user.request_make_record().json()
                except Exception as err:
                    raise Exception from err

                self.user_total_records(user, context)
                user.last_category = None
                user.last_summ = None

            elif not user.last_summ and user.last_category:
                if user.last_message.lower() not in user_categories:
                    self.user_create_category(
                        user, user.last_category, 'POST', context)
                    user.last_category = None
                else:
                    context.bot.send_message(
                        chat_id=user.id,
                        text='–î–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å!'
                    )
            else:
                context.bot.send_message(
                    chat_id=user.id,
                    text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:'
                )
        elif user.last_message.lower().startswith('from:'):
            custom_period = user.last_message.lower().split(':')[1]
            self.user_total_records(
                user, context, period=custom_period, custom=custom_period
            )

        else:
            context.bot.send_message(
                chat_id=user.id,
                text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞',
                reply_markup=button_user_categories(user_categories)
            )

        LOG.info(f'{user.id}: {user.first_name} - {user.last_message}')
