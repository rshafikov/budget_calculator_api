import json
import os
import logging

import requests as r
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater

load_dotenv()

TOKEN = os.getenv('TOKEN')

URL = os.getenv('URL')

USER_CURRENCY = "‚Ç¨"

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a',
    level=logging.INFO
)

updater = Updater(token=TOKEN)


CATEGORIES = (
    'üßÄ–ü—Ä–æ–¥—É–∫—Ç—ã', 'üå≠–ù–∞ —Ä–∞–±–æ—Ç–µ', 'üç§–î–æ—Å—Ç–∞–≤–∫–∞', 'üßã–ö–æ—Ñ–µ',
    'üöï–¢–∞–∫—Å–∏/–®–µ—Ä–∏–Ω–≥', 'üöá–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè†–î–æ–º', 'üôà–ñ–ö–•',
    'üéÅ–ü–æ–¥–∞—Ä–∫–∏', 'üíµ–î–æ–ª–≥–∏', 'üëî–û–¥–µ–∂–¥–∞', 'üè•–ó–¥–æ—Ä–æ–≤—å–µ',
    'üôä–ñ–∏–≤–æ—Ç–Ω—ã–µ', 'üé≤–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üòé–†–∞–∑–Ω–æ–µ', '‚öôÔ∏è–ú–µ–Ω—é'
)

TABLE_OF_CATEGORIES = [
    ['üßÄ–ü—Ä–æ–¥—É–∫—Ç—ã', 'üå≠–ù–∞ —Ä–∞–±–æ—Ç–µ', 'üç§–î–æ—Å—Ç–∞–≤–∫–∞', 'üßã–ö–æ—Ñ–µ'],
    ['üöï–¢–∞–∫—Å–∏/–®–µ—Ä–∏–Ω–≥', 'üöá–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè†–î–æ–º', 'üôà–ñ–ö–•'],
    ['üéÅ–ü–æ–¥–∞—Ä–∫–∏', 'üíµ–î–æ–ª–≥–∏', 'üëî–û–¥–µ–∂–¥–∞', 'üè•–ó–¥–æ—Ä–æ–≤—å–µ'],
    ['üôä–ñ–∏–≤–æ—Ç–Ω—ã–µ', 'üé≤–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üòé–†–∞–∑–Ω–æ–µ', '‚öôÔ∏è–ú–µ–Ω—é']
]

TABLE_MAIN_MENU = [
    ['–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥'],
    ['C–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü'],
    ['–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É'],
]
buttons_categories = ReplyKeyboardMarkup(
    TABLE_OF_CATEGORIES, resize_keyboard=True)

buttons_table = ReplyKeyboardMarkup(TABLE_MAIN_MENU, resize_keyboard=True)

buttons_ok = ReplyKeyboardMarkup([['–î–ê ‚úÖ', '–ù–ê–ó–ê–î üîô']], resize_keyboard=True)

user_dict = {}


class User:
    urls = {
        'auth': f'http://{URL}/auth/users/',
        'token': f'http://{URL}/auth/jwt/create/',
        'records': f'http://{URL}/records/',
        'total': f'http://{URL}/records/total-spend/',
    }

    def __init__(self, update):
        self.headers = {'Content-Type': 'application/json'}
        self.id = update.effective_chat.id
        self.first_name = update.message.chat.first_name
        self.last_name = update.message.chat.last_name
        self.username = self.first_name + str(self.last_name)
        self.last_message = update.message.text
        self.last_summ = None
        self.last_category = None

    def get_auth(self):
        data = {
            'username': self.username,
            'password': str(self.id)+'ZSe!1'
        }
        data = json.dumps(data)
        self.request_auth = r.post(
            url=self.urls['auth'],
            headers=self.headers,
            data=data
        )
        self.request_token = r.post(
            url=self.urls['token'],
            headers=self.headers,
            data=data
        )
        self.token = 'Bearer ' + self.request_token.json().get('access')
        self.headers.update({'Authorization': self.token})

    def make_record(self):
        if self.last_summ and self.last_category:
            data = {
                'category': self.last_category,
                'amount': str(self.last_summ)
            }
            data = json.dumps(data)
            self.request_record = r.post(
                url=self.urls['records'],
                headers=self.headers,
                data=data
            )

    def get_total(self):
        self.request_total = r.get(
            url=self.urls['total'],
            headers=self.headers,
        )

    def get_records_list(self):
        self.request_records_list = r.get(
            url=self.urls['records'],
            headers=self.headers,
        )

    def __str__(self):
        return f'{self.username} -- {self.last_category}: {self.last_summ}'


def get_or_create_user(chat_id, update):
    if not user_dict.get(chat_id):
        user = User(update)
        user.get_auth()
        user_dict.update({user.id: user})
        return user

    return user_dict.get(chat_id)


def return_correct_date(string):
    new_string = string.split('T')
    date = new_string[0]
    time = new_string[1].split('.')[0]
    return f'üóì{date} üï∞{time}'


def make_table(list):
    table = [(
        '{0:<12} {1:>7} {2}\n'
        .format(
            CATEGORIES[record["category"] - 1],
            record["total"],
            USER_CURRENCY)
        ) for record in list
    ]
    return table


def start_message(update, context):
    chat_id = update.effective_chat.id
    user = get_or_create_user(chat_id, update)
    context.bot.send_message(
        chat_id=user.id,
        text=(
            '–ü—Ä–∏–≤–µ—Ç, {}. –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º. '
            '–£–∫–∞–∑—ã–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –≤–≤–æ–¥–∏ —Å—É–º–º—É, —Å–º–æ—Ç—Ä–∏ –∏—Ç–æ–≥.'
            .format(user.first_name)
        ),
        reply_markup=buttons_table
    )


def handle_message(update, context):
    chat_id = update.effective_chat.id
    user = get_or_create_user(chat_id, update)
    user.last_message = update.message.text
    if user.last_message in ['–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥', '–ù–ê–ó–ê–î üîô']:
        user.last_category = None
        user.last_summ = None
        context.bot.send_message(
            chat_id=chat_id,
            text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
            reply_markup=buttons_categories
        )
        logging.info(f'{user.id}: {user.first_name} - {user.last_message}')

    elif user.last_message == 'C–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü':
        user.get_records_list()
        data = user.request_records_list.json()
        if data:
            context.bot.send_message(
                chat_id=chat_id,
                text=('\n'.join([
                    f'–î–∞—Ç–∞: {return_correct_date(record.get("created"))}\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record.get("category")}\n'
                    f'–°—É–º–º–∞: {record.get("amount")} '
                    f'{USER_CURRENCY}\n' for record in data
                    ])
                )
            )
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text='–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥?',
                reply_markup=buttons_table
                )
            logging.info(f'{user.id}: {user.first_name} - {user.last_message}')

    elif user.last_message == '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É':
        user.get_total()
        data = user.request_total.json()
        summary_list = ''.join(make_table(data.get('summary')))
        total_per_day = data.get("current_day")
        if not total_per_day:
            total_per_day = 0
        context.bot.send_message(
            chat_id=chat_id,

            text=(
                f'–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {data.get("total")} {USER_CURRENCY}\n'
                f'–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: '
                f'{data.get("current_month")} {USER_CURRENCY}\n'
                f'–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å: {total_per_day} {USER_CURRENCY}\n'
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è    |    –¢–æ—Ç–∞–ª    \n'
                '--------------------------\n'
                f'{summary_list}'
            ),
            reply_markup=buttons_table
        )
        logging.info(f'{user.id}: {user.first_name} - {user.last_message}')

    elif user.last_message in CATEGORIES[:15]:
        user.last_category = user.last_message
        context.bot.send_message(
                chat_id=chat_id,
                text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:'
            )

    elif user.last_message == '‚öôÔ∏è–ú–µ–Ω—é':
        context.bot.send_message(
            chat_id=chat_id,
            text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=buttons_table
        )

    elif user.last_message.isdigit():
        user.last_summ = user.last_message
        if user.last_category:
            context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f'–í—ã —É–∫–∞–∑–∞–ª–∏: \n'
                    '------------\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.last_category}\n'
                    f'C—É–º–º–∞: {user.last_message} {USER_CURRENCY}\n\n'
                    '–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–î–ê ‚úÖ"'
                ),
                reply_markup=buttons_ok
            )
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                reply_markup=buttons_categories
            )

    elif user.last_message == '–î–ê ‚úÖ':
        if user.last_summ and user.last_category:
            user.make_record()
            context.bot.send_message(
                chat_id=chat_id,
                text=(
                    '–ó–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ: ‚úÖ\n'
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.last_category}\n'
                    f'–°—É–º–º–∞: {user.last_summ} {USER_CURRENCY}\n\n'
                    f'–û–∂–∏–¥–∞—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å :)'),
                reply_markup=buttons_table
            )
            user.last_category = None
            user.last_summ = None
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text='–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:'
            )

    else:
        context.bot.send_message(
            chat_id=chat_id,
            text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞',
            reply_markup=buttons_categories
        )


updater.dispatcher.add_handler(CommandHandler('start', start_message))
updater.dispatcher.add_handler(MessageHandler(Filters.text, handle_message))

updater.start_polling()
updater.idle()
